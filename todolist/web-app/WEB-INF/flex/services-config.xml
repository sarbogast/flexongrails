<?xml version='1.0' encoding='UTF-8'?>
<services-config>

	<services>

		<!--
		Application level default channels. Application level default channels are
		necessary when a dynamic destination is being used by a service component
		and no ChannelSet has been defined for the service component. In that case,
		application level default channels will be used to contact the destination.
		-->
		<default-channels>
			<channel ref='my-amf'/>
		</default-channels>
	</services>

	<security>

		<login-command class='flex.messaging.security.TomcatLoginCommand' server='Tomcat'/>
		<!--
		<login-command class='flex.messaging.security.JRunLoginCommand' server='JRun'/>
		<login-command class='flex.messaging.security.WeblogicLoginCommand' server='Weblogic'/>
		<login-command class='flex.messaging.security.WebSphereLoginCommand' server='WebSphere'/>
		-->

		<!--
		<security-constraint id='trusted'>
			<roles>
				<role>ROLE_USER</role>
				<role>ROLE_ADMIN</role>
			</roles>
		</security-constraint>
		-->
	</security>


	<channels>

		<!-- A regular AMF channel -->
		<channel-definition id='my-amf' class='mx.messaging.channels.AMFChannel'>
			<endpoint url='http://{server.name}:{server.port}/{context.root}/messagebroker/amf'
					    class='flex.messaging.endpoints.AMFEndpoint'/>
			<properties>
				<polling-enabled>false</polling-enabled>
			</properties>
		</channel-definition>

		<!-- A secure AMF channel -->
		<channel-definition id='my-secure-amf' class='mx.messaging.channels.SecureAMFChannel'>
			<endpoint url='https://{server.name}:{server.port}/{context.root}/messagebroker/amfsecure'
					    class='flex.messaging.endpoints.SecureAMFEndpoint'/>
			<properties>
				<!--HTTPS requests on some browsers do not work when pragma 'no-cache' are set-->
				<add-no-cache-headers>false</add-no-cache-headers>
			</properties>
		</channel-definition>

		<!-- A polling AMF channel -->
		<channel-definition id='my-polling-amf' class='mx.messaging.channels.AMFChannel'>
			<endpoint url='http://{server.name}:{server.port}/{context.root}/messagebroker/amfpolling'
					    class='flex.messaging.endpoints.AMFEndpoint'/>
			<properties>
				<polling-enabled>true</polling-enabled>
				<polling-interval-seconds>3</polling-interval-seconds>
			</properties>
		</channel-definition>

		<!-- A long polling AMF channel -->
		<channel-definition id='my-longpolling-amf' class='mx.messaging.channels.AMFChannel'>
			<endpoint url='http://{server.name}:{server.port}/{context.root}/messagebroker/amflongpolling'
					    class='flex.messaging.endpoints.AMFEndpoint'/>
			<properties>
				<user-agent-settings>
					<!--
					<user-agent match-on='MSIE' max-streaming-connections-per-session=''1 kickstart-bytes='2048'/>
					<user-agent match-on='Firefox' max-streaming-connections-per-session='1' kickstart-bytes='0'/>
					 -->
					<!-- MSIE 5, 6, 7 limit is 2. -->
					<user-agent match-on='MSIE' max-persistent-connections-per-session='1' kickstart-bytes='2048'/>
					<!-- MSIE 8 limit is 6. -->
					<user-agent match-on='MSIE 8' max-persistent-connections-per-session='5' kickstart-bytes='2048'/>
					<!-- Firefox 1, 2 limit is 2. -->
					<user-agent match-on='Firefox' max-persistent-connections-per-session='1'/>
					<!-- Firefox 3 limit is 6. -->
					<user-agent match-on='Firefox/3' max-persistent-connections-per-session='5'/>
					<!-- Safari 3, 4 limit is 4. -->
					<user-agent match-on='Safari' max-persistent-connections-per-session='3'/>
					<!-- Chrome 0, 1, 2 limit is 6. -->
					<user-agent match-on='Chrome' max-persistent-connections-per-session='5'/>
					<!-- Opera 7, 9 limit is 4.-->
					<user-agent match-on='Opera' max-persistent-connections-per-session='3'/>
					<!-- Opera 8 limit is 8. -->
					<user-agent match-on='Opera 8' max-persistent-connections-per-session='7'/>
					<!-- Opera 10 limit is 8. -->
					<user-agent match-on='Opera 9.8' max-persistent-connections-per-session='7'/>
				</user-agent-settings>
				<polling-enabled>true</polling-enabled>
				<polling-interval-seconds>0</polling-interval-seconds>
				<max-waiting-poll-requests>10</max-waiting-poll-requests>
				<wait-interval-millis>-1</wait-interval-millis>
				<client-wait-interval-millis>3000</client-wait-interval-millis>
			</properties>
		</channel-definition>

		<!-- A regular HTTP channel
		<channel-definition id='my-http' class='mx.messaging.channels.HTTPChannel'>
			<endpoint url='http://{server.name}:{server.port}/{context.root}/messagebroker/http'
					    class='flex.messaging.endpoints.HTTPEndpoint'/>
			<properties>
				<polling-enabled>false</polling-enabled>
			</properties>
		</channel-definition>
		-->

		<!-- A secure HTTP channel
		<channel-definition id='my-secure-http' class='mx.messaging.channels.SecureHTTPChannel'>
			<endpoint url='https://{server.name}:{server.port}/{context.root}/messagebroker/httpsecure'
					    class='flex.messaging.endpoints.SecureHTTPEndpoint'/>
			<properties>
				<add-no-cache-headers>false</add-no-cache-headers>
			</properties>
		</channel-definition>
		-->

		<!-- A polling HTTP channel
		<channel-definition id='my-http-poll' class='mx.messaging.channels.HTTPChannel'>
			<endpoint url='http://{server.name}:{server.port}/{context.root}/messagebroker/myhttppoll'
					    class='flex.messaging.endpoints.HTTPEndpoint'/>
			<properties>
				<polling-enabled>true</polling-enabled>
				<polling-interval-seconds>3</polling-interval-seconds>
			</properties>
		</channel-definition>
		-->

		<!-- A long polling HTTP channel
		<channel-definition id='my-http-longpoll' class='mx.messaging.channels.HTTPChannel'>
			<endpoint url='http://{server.name}:{server.port}/{context.root}/messagebroker/myhttplongpoll'
					    class='flex.messaging.endpoints.HTTPEndpoint'/>
			<properties>
				<polling-enabled>true</polling-enabled>
				<polling-interval-seconds>0</polling-interval-seconds>
				<max-waiting-poll-requests>10</max-waiting-poll-requests>
				<wait-interval-millis>-1</wait-interval-millis>
				<client-wait-interval-millis>3000</client-wait-interval-millis>
			</properties>
		</channel-definition>
		-->

		<!-- A streaming HTTP channel with default options left out
		<channel-definition id='my-http-stream' class='mx.messaging.channels.StreamingHTTPChannel'>
			<endpoint url='http://{server.name}:{server.port}/{context.root}/messagebroker/myhttpstream'
					    class='flex.messaging.endpoints.StreamingHTTPEndpoint'/>
		</channel-definition>
		-->

	</channels>

	<logging>
		<target class='flex.messaging.log.ConsoleTarget' level='Info'>
			<properties>
				<prefix>[BlazeDS] </prefix>
				<includeDate>false</includeDate>
				<includeTime>false</includeTime>
				<includeLevel>false</includeLevel>
				<includeCategory>false</includeCategory>
			</properties>
			<filters>
				<pattern>Endpoint.*</pattern>
				<pattern>Service.*</pattern>
				<pattern>Configuration</pattern>
			</filters>
		</target>
	</logging>

	<system>
		<!--
		<redeploy>
			<enabled>true</enabled>
			<watch-interval>20</watch-interval>
			<watch-file>{context.root}/WEB-INF/flex/services-config.xml</watch-file>
			<watch-file>{context.root}/WEB-INF/flex/proxy-config.xml</watch-file>
			<watch-file>{context.root}/WEB-INF/flex/remoting-config.xml</watch-file>
			<watch-file>{context.root}/WEB-INF/flex/messaging-config.xml</watch-file>
			<touch-file>{context.root}/WEB-INF/web.xml</touch-file>
		</redeploy>
		<manageable>false</manageable>
		-->
		<!--<enforce-endpoint-validation>false</enforce-endpoint-validation>-->
	</system>

	<flex-client>
	<!--
		<timeout-minutes>45</timeout-minutes>
		<heartbeat-interval-millis>5000</heartbeat-interval-millis>
	-->
	</flex-client>

	<validators>
		<!--
		<validator class='flex.messaging.validators.ClassDeserializationValidator'>
			<properties>
				<disallow-classes>
				</disallow-classes>
				<allow-classes>
					<class name='java.*'/>
					<class name='\[Ljava.*'/>
					<class name='flex.*'/>
				</allow-classes>
			 </properties>
		</validator>
		-->
	</validators>

</services-config>
